name: Build container image for PR
on:
  pull_request:
    types: [labeled, synchronize, reopened, ready_for_review, opened]

permissions:
  contents: read
  packages: write

jobs:
  compute-suffix:
    runs-on: ubuntu-latest
    # This is only allowed to run if:
    # - the PR is not a draft
    # - the PR has the "build-image" label
    if: ${{ !github.event.pull_request.draft && contains(github.event.pull_request.labels.*.name, 'build-image') }}
    steps:
      # Repository needs to be cloned so `git rev-parse` below works
      - name: Clone repository
        uses: actions/checkout@v4
      - id: version_vars
        run: |
          # Determine image repo based on target branch
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          PR_SUFFIX="pr-${{ github.event.pull_request.number }}-$(git rev-parse --short ${{github.event.pull_request.head.sha}})"
          
          if [[ "$TARGET_BRANCH" == "basic" ]]; then
            echo "patchwork_dashboard_version_metadata=${PR_SUFFIX}-basic" >> $GITHUB_OUTPUT
            echo "ghcr_repo=ghcr.io/patchwork-hub/patchwork_dashboard_basic" >> $GITHUB_OUTPUT
          elif [[ "$TARGET_BRANCH" == "mvp" ]]; then
            echo "patchwork_dashboard_version_metadata=${PR_SUFFIX}-mvp" >> $GITHUB_OUTPUT
            echo "ghcr_repo=ghcr.io/patchwork-hub/patchwork_dashboard_mvp" >> $GITHUB_OUTPUT
          else
            echo "patchwork_dashboard_version_metadata=${PR_SUFFIX}" >> $GITHUB_OUTPUT
            echo "ghcr_repo=ghcr.io/patchwork-hub/patchwork_dashboard" >> $GITHUB_OUTPUT
          fi
          
          echo "patchwork_dashboard_short_sha=$(git rev-parse --short ${{github.event.pull_request.head.sha}})" >> $GITHUB_OUTPUT
    outputs:
      metadata: ${{ steps.version_vars.outputs.patchwork_dashboard_version_metadata }}
      short_sha: ${{ steps.version_vars.outputs.patchwork_dashboard_short_sha }}
      ghcr_repo: ${{ steps.version_vars.outputs.ghcr_repo }}

  build-image:
    needs: compute-suffix
    uses: ./.github/workflows/build-container-image.yml
    with:
      file_to_build: Dockerfile
      push_to_images: |
        ${{ needs.compute-suffix.outputs.ghcr_repo }}
      version_metadata: ${{ needs.compute-suffix.outputs.metadata }}
      flavor: |
        latest=auto
      tags: |
        type=ref,event=pr
        type=ref,event=pr,suffix=-${{ needs.compute-suffix.outputs.short_sha }}
    secrets: inherit